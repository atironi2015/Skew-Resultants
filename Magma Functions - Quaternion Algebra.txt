
// Quaternion algebra

F<i,j,k> := QuaternionAlgebra< RealField() | -1, -1 >;
R<x>:=PolynomialRing(F);
S:= map< F -> F | x :-> i*x*(1/i) >;
D:= map< F -> F | x :-> 0 >;


//
// MAGMA FUNCTIONS for skew resultants:
//

//
// Program 1
//

// PosCom 
// INPUT: d,s positive integers and a an element of the division field
// OUTPUT: C_{d,s}(a)

PosCom:=function(d,s,a)
C:= [u: u in [VectorSpace(GF(2),d+s)!v : v in VectorSpace(GF(2),d+s)\
]| Weight(u) eq d];
A:=0;
 for k in [1..#C] do
  b:=a;
   for l in [1..d+s] do
    if C[k][l] eq 0 then
     b:=S(b);
     else
     b:=D(b); 
    end if;
   end for;
  A:=A+b;
 end for;
return A;
end function;


//
// Program 2
//

// MultPol function
// INPUT: f,g polynomials in vector form
// OUTPUT: the product f*g

MultPol:=function(f,g)
M:=0;
 for i in [1..#f] do
  for j in [1..#g] do
   for k in [0..i-1] do
    n:=(i-1)+(j-1)-k;
    M:=M+f[i]*PosCom(k,i-k-1,g[j])*x^n;
   end for;
  end for;
 end for;
return M;
end function;


//
// Program 3
//

// SylvesterMatrix function
// INPUT: f,g polynomials in vector form
// OUTPUT: the skew Sylvester matrix of f and g

// SumPosCom function

SumPosCom:=function(f,i,j)
AA:=0;
n:=#f-1;
 for I in [0..i-1] do
  if j-1-I ge 0 and j-1-I le n then
   if i-1 ne 0 then
    AA:=AA+PosCom(i-1-I,I,f[j-I]);
    else
    AA:=f[j-I];
   end if;
  end if;
 end for;
return AA;
end function;

SylvesterMatrix:=function(f,g)
n:=#f-1;
m:=#g-1;
if m ne 0 then
 M1:= Matrix(F,1,n+m,[SumPosCom(f,s,t): s in {1}, t in {1..n+m}]);
  for p in [2..m] do
   X:=Matrix(F,1,n+m,[SumPosCom(f,s,t): s in {p}, t in {1..n+m}]);
   M1:=VerticalJoin(M1,X);
  end for;
else
 M1:=RemoveRow(ZeroMatrix(F,1,n+m),1);
end if;
if n ne 0 then
 M2:= Matrix(F,1,n+m,[SumPosCom(g,s,t): s in {1}, t in {1..n+m}]);
  for p in [2..n] do
   X:=Matrix(F,1,n+m,[SumPosCom(g,s,t): s in {p}, t in {1..n+m}]);
   M2:=VerticalJoin(M2,X);
  end for;
else
 M2:=RemoveRow(ZeroMatrix(F,1,n+m),1);
end if;
M:=VerticalJoin(M1,M2);
return M;
end function;


//
// Remark 3.5 - The function "Det"
//

// Det function
// INPUT: a matrix M
// OUTPUT: the determinant of M

Det:=function(M)
n:=NumberOfColumns(M);
P:=[ p : p in Permutations({a : a in [1..n]})];
S2:=0;
 for k in [1..#P] do
  S1:=1;
  for j in [1..n] do
   S1:=S1*M[j,P[k][j]];
  end for;
  g:=Sym(n)!P[k];
  if IsEven(g) then
   S2:=S2+S1;
   else 
   S2:=S2-S1;
  end if;
 end for;
return S2;
end function;


//
// Program 4
//

// MT function
// INPUT: a matrix M
// OUTPUT: the upper triangular matrix of M

MT:=function(M)
n:=NumberOfRows(M); m:=NumberOfRows(M);
MM:=RemoveRow(SubmatrixRange(M,1,1,1,n),1); 
j:=0;
repeat
j:=j+1; i:=0; k:=0;
 repeat
 i:=i+1;
  if M[i,j] ne 0 then
   a:=M[i,j]; M1:=SubmatrixRange(M,i,1,i,n); M4:=M1; M2:=RemoveRow(M,i); 
   n1:=NumberOfRows(M2);
    for i1 in [1..n1] do
     M3:=Matrix(F,1,n,[ M2[i1,j1]-M2[i1,j]*(1/a)*M1[1,j1] : j1 in [1..n]]);
     M4:=VerticalJoin(M4,M3);
    end for;
   MM:=VerticalJoin(MM,M1); M:=RemoveRow(M4,1); m:=NumberOfRows(M);
   else 
   k:=k+1;
  end if;
 if k eq m and k ne 0 then
  MM:=VerticalJoin(MM,ZeroMatrix(F,1,n));
 end if;
 if k eq n then
  j:=n;
 end if;
until i ge m;
until j eq n;
return MM;
end function;


// DD function
// INPUT: a matrix M (with entries only in the Quaternion algebra)
// OUTPUT: if the Dieudinn√© determinant is zero or not

DD:=function(M)
MM:=MT(M);
A:=1;
n:=NumberOfRows(M);
 for N in [1..n] do
  A:=A*MM[N,N];
 end for;
 if A*Conjugate(A) eq F!1 or A*Conjugate(A) eq F!0 then
  print"Ddet is";
  return 0;
 end if;
print"Ddet is NOT";
return 0;
end function;


//
// Program 5
//

// LeftSylvesterMatrix
// INPUT: f,g polynomials in vector form
// OUTPUT: the left Sylvester Matrix of f and g

// PosComT 

PosComT:=function(i,j,a)
C:= [u: u in [VectorSpace(GF(2),i+j)!v : v in 
VectorSpace(GF(2),i+j)]| Weight(u) eq i];
A:=0;
for k in [1..#C] do
 b:=a;
  for l in [1..i+j] do
   if C[k][l] eq 1 then
    b:=D(S(b));
    else
    b:=S(b); 
   end if;
  end for;
 A:=A+b;
end for;
return A;
end function;

// Ai 

Ai:=function(f,i)
A:=0;
for j in [0..#f-i] do
 A:=A+(-1)^(j)*PosComT(j,i-1,f[j+i]);
end for;
return A;
end function;

// SumPosComT

SumPosComT:=function(f,i,j)
AA:=0;
for k in [0..i-1] do
 if j-k ge 1 and j-k le #f then
  if i-1 ne 0 then
   AA:=AA+(-1)^(i-1+k)*PosComT(i-1-k,k,Ai(f,j-k));
   else
   AA:=(-1)^(i-1+k)*Ai(f,j-k);
  end if;
 end if;
end for;
return AA;
end function;


LeftSylvesterMatrix:=function(f,g)
m:=#f-1;
n:=#g-1;
if n ne 0 then
 M1:= Matrix(F,1,n+m,[SumPosComT(f,s,t): s in {1}, t in {1..n+m}]);
  for p in [2..n] do
   X:=Matrix(F,1,n+m,[SumPosComT(f,s,t): s in {p}, t in {1..n+m}]);
   M1:=VerticalJoin(M1,X);
  end for;
 else
 M1:=RemoveRow(ZeroMatrix(F,1,n+m),1);
end if;
if m ne 0 then
 M2:= Matrix(F,1,n+m,[SumPosComT(g,s,t): s in {1}, t in {1..n+m}]);
  for p in [2..m] do
   X:=Matrix(F,1,n+m,[SumPosComT(g,s,t): s in {p}, t in {1..n+m}]);
   M2:=VerticalJoin(M2,X);
  end for;
 else
 M2:=RemoveRow(ZeroMatrix(F,1,n+m),1);
end if;
M:=VerticalJoin(M1,M2);
return M;
end function;


//
// Program 6
//

// DerNA function
// INPUT: f a polynomial in vector form, A is a vector
// OUTPUT: Delta_A(f)

DerNA:=function(f,A)
 t:=#f;
 if #A ge t then
  f:=F!0;
 end if;  
 if #A le t-1 then
  if t eq 2 then
   f:=F!f[t];
  end if;
  if t ge 3 then
   for i in [1..#A] do
    t:=#f;
    b:=[ f[t] ];
    for h in [0..t-3] do
     s:=F!0;
     for j in [0..h] do
      s1:=b[h+1-j]*PosCom(j,t-2-h,A[i]);
      s:= s + s1;
     end for;
     b:= b cat [ f[t-1-h] + s ];
    end for;
    g:=[];
    for k in [1..#b] do
     g:=g cat [ b[#b+1-k] ];
    end for;
    f:=g;
   end for;
  end if;
 end if;
 return R!f;
end function;
